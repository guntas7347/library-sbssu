import speakeasy from "speakeasy";
import prisma from "../../services/prisma.js";
import { comparePassword } from "../../utils/bycrypt.js";
import crs from "../../utils/crs/crs.js";
import { createLog } from "../../utils/log.js";

/**
 * Middleware to authenticate a user using username, password, and TOTP (2FA).
 *
 * @param {import("express").Request} req - Express request object.
 * @param {import("express").Response} res - Express response object.
 * @param {import("express").NextFunction} next - Express next middleware function.
 *
 * @returns {Promise<void>} Responds with appropriate error or continues to next middleware.
 *
 * Request body must include:
 * @property {string} username - The username of the user (case-insensitive).
 * @property {string} password - The plain text password.
 * @property {string} totp - The 2FA token generated by TOTP.
 *
 * On success, attaches the following to req.context:
 * @property {string} id - User ID from database.
 * @property {string} role - Role of the user.
 * @property {string} userType - Type/category of the user.
 */
export const authenticateUser = async (req, res, next) => {
  try {
    const { username, password, totp } = req.body;

    // 1. Find the user in the database by username (case-insensitive)
    const authDoc = await prisma.auth.findUnique({
      where: { username },
    });

    if (!authDoc)
      // Invalid username
      return res.status(401).json(crs.AUTH_401_INVALID_CREDENTIALS());

    // 2. Compare the input password with the stored hashed password
    const isPasswordValid = await comparePassword(password, authDoc.password);
    if (!isPasswordValid)
      // Invalid password
      return res.status(401).json(crs.AUTH_401_INVALID_CREDENTIALS());

    // 3. Validate the 2FA token using speakeasy TOTP verification
    const isTotpValid = speakeasy.totp.verify({
      secret: authDoc.twoFaSecret,
      encoding: "base32",
      token: totp,
      window: 1, // allow Â±1 step window for timing flexibility
    });

    if (!isTotpValid) {
      // Invalid TOTP token
      return res.status(401).json(crs.AUTH_401_INVALID_CREDENTIALS());
    }

    // 4. Authentication successful, attach user info to request context
    req.context = {
      id: authDoc.id,
      role: authDoc.role,
      userType: authDoc.userType,
    };

    next(); // Proceed to next middleware
  } catch (error) {
    createLog(error);
    return res.status(500).json(crs.SERR_500_INTERNAL());
  }
};
